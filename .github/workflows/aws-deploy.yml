name: AWS Deployment

# For testing purposes I want this to be inputed manually right now.
# When everything is working, I will change this to secrets.
on:
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY:
        description: 'AWS Access Key'
        required: true
      AWS_SECRET_KEY:
        description: 'AWS Secret Key'
        required: true
      AWS_SESSION_TOKEN:
        description: 'AWS Session Token'
        required: true
      CHAIR_API_KEY:
        description: 'CHAIR API Key for GenAI service'
        required: true
      OPENAI_API_KEY:
        description: 'OpenAI API Key for GenAI service'
        required: true

jobs:
  provision:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
      ec2_dns: ${{ steps.get_dns.outputs.ec2_dns }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        working-directory: ./infra/terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infra/terraform
        run: |
          terraform apply --auto-approve \
            --var="aws_access_key=${{ github.event.inputs.AWS_ACCESS_KEY }}" \
            --var="aws_secret_key=${{ github.event.inputs.AWS_SECRET_KEY }}" \
            --var="aws_session_token=${{ github.event.inputs.AWS_SESSION_TOKEN }}"

      - name: Get EC2 Public IP
        id: get_ip
        working-directory: ./infra/terraform
        run: |
          echo "ec2_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      - name: Get EC2 Public DNS
        id: get_dns
        working-directory: ./infra/terraform
        run: |
          echo "ec2_dns=$(terraform output -raw ec2_public_dns)" >> $GITHUB_OUTPUT

  deploy:
    needs: provision
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ needs.provision.outputs.ec2_ip }}
      EC2_DNS: ${{ needs.provision.outputs.ec2_dns }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write ssh key to infra/pk.pem
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ./infra/pk.pem
          chmod 600 ./infra/pk.pem
          ssh-keygen -y -f ./infra/pk.pem > /dev/null
          if [ $? -ne 0 ]; then
            echo "Invalid private key provided. Please check the AWS_PRIVATE_KEY secret."
            exit 1
          fi

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.11.0'

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Generate Ansible inventory
        run: |
          echo "[ec2]" > infra/inventory.ini
          echo "target ansible_host=${{ needs.provision.outputs.ec2_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=./infra/pk.pem" >> infra/inventory.ini

      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'false'
        run: |
          ansible-playbook -i infra/inventory.ini infra/ansible/playbooks/install-kubernetes.yml -v

      - name: Fetch and adapt kubeconfig from EC2
        run: |
          ssh -i ./infra/pk.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.provision.outputs.ec2_ip }} "cat /home/ubuntu/.kube/config" > ./kubeconfig
          sed -i "s|127.0.0.1|${{ needs.provision.outputs.ec2_ip }}|" ./kubeconfig
          sed -i "s|localhost|${{ needs.provision.outputs.ec2_ip }}|" ./kubeconfig
          sed -i "/certificate-authority/d" ./kubeconfig
          sed -i "/server:/a \ \ \ \ insecure-skip-tls-verify: true" ./kubeconfig

      - name: Set KUBECONFIG
        run: |
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Test kubectl access
        run: kubectl get nodes

      - name: Create GenAI Secret
        run: |
          kubectl create namespace devops25-team-robogo --dry-run=client -o yaml | kubectl apply -f -
          
          # Check if secret exists and patch it, otherwise create it
          if kubectl get secret genai-secret -n devops25-team-robogo >/dev/null 2>&1; then
            echo "Secret genai-secret already exists, patching it..."
            kubectl patch secret genai-secret -n devops25-team-robogo \
              --type='merge' \
              -p="{\"data\":{\"CHAIR_API_KEY\":\"$(echo -n "${{ github.event.inputs.CHAIR_API_KEY }}" | base64 -w0)\",\"OPENAI_API_KEY\":\"$(echo -n "${{ github.event.inputs.OPENAI_API_KEY }}" | base64 -w0)\"}}"
          else
            echo "Creating new secret genai-secret..."
            kubectl create secret generic genai-secret \
              --from-literal=CHAIR_API_KEY="${{ github.event.inputs.CHAIR_API_KEY }}" \
              --from-literal=OPENAI_API_KEY="${{ github.event.inputs.OPENAI_API_KEY }}" \
              -n devops25-team-robogo
          fi
          
          # Add Helm labels and annotations
          kubectl label secret genai-secret -n devops25-team-robogo app.kubernetes.io/managed-by=Helm --overwrite
          kubectl annotate secret genai-secret -n devops25-team-robogo meta.helm.sh/release-name=screen --overwrite
          kubectl annotate secret genai-secret -n devops25-team-robogo meta.helm.sh/release-namespace=devops25-team-robogo --overwrite

      - name: Deploy Helm chart
        run: |
          helm dependency build ./infra/helm/screen
          kubectl label namespace devops25-team-robogo app.kubernetes.io/managed-by=Helm --overwrite || true
          kubectl annotate namespace devops25-team-robogo meta.helm.sh/release-name=screen --overwrite || true
          kubectl annotate namespace devops25-team-robogo meta.helm.sh/release-namespace=devops25-team-robogo --overwrite || true
          helm upgrade --install screen ./infra/helm/screen --namespace devops25-team-robogo \
            -f ./infra/helm/screen/values.yaml \
            --set ingress.host="${{ needs.provision.outputs.ec2_dns }}" \
            --set ingress.className="traefik"
  

  - name: Verify Secret Creation
        run: |
          kubectl get secret genai-secret -n devops25-team-robogo -o yaml


