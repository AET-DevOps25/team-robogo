name: AWS Deployment

# For testing purposes I want this to be inputed manually right now.
# When everything is working, I will change this to secrets.
on:
  workflow_dispatch:

jobs:
  provision:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.14.0

      - name: Terraform Init
        working-directory: ./infra/terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infra/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve --var="ami_id=ami-020cba7c55df1f61" --var="key_name=vockey"

      - name: Get EC2 Public IP
        id: get_ip
        working-directory: ./infra/terraform
        run: |
          echo "ec2_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    needs: provision
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ needs.provision.outputs.ec2_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write ssh key to infra/pk.pem
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ./infra/pk.pem
          chmod 600 ./infra/pk.pem
          ssh-keygen -y -f ./infra/pk.pem > /dev/null
          if [ $? -ne 0 ]; then
            echo "Invalid private key provided. Please check the AWS_PRIVATE_KEY secret."
            exit 1
          fi

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.11.0'

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Generate Ansible inventory
        run: |
          echo "[ec2]" > infra/inventory.ini
          echo "target ansible_host=${{ needs.provision.outputs.ec2_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=./infra/pk.pem" >> infra/inventory.ini

      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'false'
        run: |
          ansible-playbook -i infra/inventory.ini infra/ansible/playbooks/install-kubernetes.yml -v

      - name: Fetch and adapt kubeconfig from EC2
        run: |
          ssh -i ./infra/pk.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.provision.outputs.ec2_ip }} "cat /home/ubuntu/.kube/config" > ./kubeconfig
          sed -i "s|127.0.0.1|${{ needs.provision.outputs.ec2_ip }}|" ./kubeconfig
          sed -i "s|localhost|${{ needs.provision.outputs.ec2_ip }}|" ./kubeconfig
          sed -i "/certificate-authority/d" ./kubeconfig
          sed -i "/server:/a \ \ \ \ insecure-skip-tls-verify: true" ./kubeconfig

      - name: Set KUBECONFIG
        run: |
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Test kubectl access
        run: kubectl get nodes

      - name: Deploy Helm chart
        run: |
          kubectl delete namespace team-robogo --ignore-not-found
          helm dependency build ./infra/helm/screen
          helm upgrade --install screen ./infra/helm/screen --namespace team-robogo --create-namespace \
            -f ./infra/helm/screen/values.yaml \
            --set grafana.enabled=false \
            --set prometheus.enabled=false \
            --set loki.enabled=false \
            --set promtail.enabled=false \
            --set redis.enabled=false \
            --set postgresExporter.enabled=false


