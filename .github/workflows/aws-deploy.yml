name: AWS Deployment

# For testing purposes I want this to be inputed manually right now.
# When everything is working, I will change this to secrets.
on:
  workflow_dispatch:
    inputs:
      EC2_HOST:
        description: 'public ip of the ec2 instance'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write ssh key to infra/pk.pem
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ./infra/pk.pem
          chmod 600 ./infra/pk.pem
          ssh-keygen -y -f ./infra/pk.pem > /dev/null
          if [ $? -ne 0 ]; then
            echo "Invalid private key provided. Please check the AWS_PRIVATE_KEY secret."
            exit 1
          fi

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.11.0'

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Generate Ansible inventory
        run: |
          echo "[ec2]" > infra/inventory.ini
          echo "target ansible_host=${{ github.event.inputs.EC2_HOST }} ansible_user=ubuntu ansible_ssh_private_key_file=./infra/pk.pem" >> infra/inventory.ini

      - name: Run Ansible Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'false'
        run: |
          ansible-playbook -i infra/inventory.ini infra/ansible/playbooks/install-kubernetes.yml -v

      - name: Fetch kubeconfig from EC2
        run: |
          ssh -i ./infra/pk.pem -o StrictHostKeyChecking=no ubuntu@${{ github.event.inputs.EC2_HOST }} "cat /home/ubuntu/.kube/config" > ./kubeconfig
          sed -i "s|127.0.0.1|${{ github.event.inputs.EC2_HOST }}|" ./kubeconfig
          sed -i "s|localhost|${{ github.event.inputs.EC2_HOST }}|" ./kubeconfig

      - name: Set KUBECONFIG
        run: |
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Test kubectl access
        run: kubectl get nodes

      - name: Deploy Helm chart
        run: |
          kubectl delete namespace team-robogo --ignore-not-found
          helm dependency build ./infra/helm/screen
          helm upgrade --install screen ./infra/helm/screen --namespace team-robogo --create-namespace

     # - name: Copy Helm chart to EC2
     #   run: |
     #    scp -o StrictHostKeyChecking=no -i infra/pk.pem -r ./infra/helm/screen ubuntu@${{ github.event.inputs.EC2_HOST }}:/home/ubuntu/screen-chart


     # - name: Deploy using Helm
     #   run: |
     #     ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 -o StrictHostKeyChecking=no -i infra/pk.pem ubuntu@${{ github.event.inputs.EC2_HOST }} << 'EOF'
     #     kubectl delete namespace team-robogo --ignore-not-found
     #     export KUBECONFIG=/home/ubuntu/.kube/config
     #     helm dependency build /home/ubuntu/screen-chart
     #     helm upgrade --install team-robogo /home/ubuntu/screen-chart --namespace team-robogo --create-namespace
     #     rm -rf /home/ubuntu/screen-chart
     #     EOF

