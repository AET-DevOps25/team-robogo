project:
  name: screen

db:
  name: robogo_db
  user: robogo
  host: db-service
  password: robogo_pass
  port: 5432

gateway:
  image: ghcr.io/aet-devops25/team-robogo/api-gateway:main
  imagePullPolicy: Always
  port: 8080

server:
  image: ghcr.io/aet-devops25/team-robogo/server:main
  imagePullPolicy: Always
  port: 8081
  adminUsername: admin
  adminPassword: admin
  adminEmail: admin@example.com

client:
  image: ghcr.io/aet-devops25/team-robogo/client:main
  imagePullPolicy: Always
  imageTag: main
  apiGatewayHost: gateway-service
  port: 80
  targetPort: 3000
  nodePort: 30001

genai:
  image: ghcr.io/aet-devops25/team-robogo/genai:main
  imagePullPolicy: Always
  port: 5000
  chairApiKey: "sk-xxx"
  openaiApiKey: "sk-yyy"

ingress:
  enabled: true
  className: "nginx"
  host: team-robogo.student.k8s.aet.cit.tum.de
  secretName: "team-robogo-tls"
  tls: true
  # host: screen.local
  # tls: false
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

promtail:
  image:
    repository: grafana/promtail
    tag: 2.9.2
  resources: {}
  lokiUrl: http://loki:3100/loki/api/v1/push

loki:
  image:
    repository: grafana/loki
    tag: 2.9.2
  replicas: 1
  resources: {}
  service:
    port: 3100
  persistence:
    enabled: false
    size: 5Gi
    storageClassName: ""

prometheus:
  image:
    repository: prom/prometheus
    tag: v2.45.0
  service:
    port: 9090
  resources: {}
  persistence:
    enabled: false
    size: 5Gi
    storageClassName: ""

alertmanager:
  image:
    repository: prom/alertmanager
    tag: v0.26.0
  service:
    port: 9093
  resources: {}
  tls: true
  persistence:
    enabled: false
    size: 1Gi
    storageClassName: ""
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: 'https://hooks.slack.com/services/YOUR_SLACK_WEBHOOK'
    route:
      group_by: ['alertname', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'slack-notifications'
      routes:
        - match:
            severity: critical
          receiver: 'pager-duty-critical'
          continue: true
        - match:
            severity: info
          receiver: 'slack-info'
          continue: true
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['service']
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - channel: '#team-robogo-alerts'
            title: 'Team RoboGo Alert'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            color: '{{ if eq .CommonLabels.severity "critical" }}danger{{ else if eq .CommonLabels.severity "warning" }}warning{{ else }}good{{ end }}'
            fields:
              - title: 'Severity'
                value: '{{ .CommonLabels.severity }}'
                short: true
              - title: 'Service'
                value: '{{ .CommonLabels.service }}'
                short: true
      - name: 'slack-info'
        slack_configs:
          - channel: '#team-robogo-info'
            title: 'Team RoboGo Info'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
            color: 'good'
      - name: 'pager-duty-critical'
        pagerduty_configs:
          - service_key: YOUR_PAGERDUTY_SERVICE_KEY
            description: 'Critical alert in Team RoboGo system'
            severity: '{{ if eq .CommonLabels.severity "critical" }}critical{{ else }}warning{{ end }}'
      - name: 'email-notifications'
        email_configs:
          - to: 'team-robogo-alerts@company.com'
            from: 'alertmanager@team-robogo.com'
            smarthost: 'smtp.company.com:587'
            auth_username: 'alertmanager@company.com'
            auth_password: 'YOUR_EMAIL_PASSWORD'
            headers:
              subject: 'Team RoboGo Alert: {{ .CommonLabels.alertname }}'
            html: |
              <h1>Team RoboGo Alert</h1>
              <p><strong>Alert:</strong> {{ .CommonLabels.alertname }}</p>
              <p><strong>Severity:</strong> {{ .CommonLabels.severity }}</p>
              <p><strong>Service:</strong> {{ .CommonLabels.service }}</p>
              <p><strong>Summary:</strong> {{ .CommonAnnotations.summary }}</p>
              <p><strong>Description:</strong> {{ .CommonAnnotations.description }}</p>

grafana:
  image:
    repository: grafana/grafana
    tag: 10.1.5
  service:
    port: 3000
  resources: {}
  adminUser: admin
  adminPassword: admin
  tls: true
  persistence:
    enabled: false
    size: 5Gi
    storageClassName: ""
  datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.team-robogo.svc:9090
      isDefault: true
    - name: Loki
      type: loki
      access: proxy
      url: http://loki.team-robogo.svc:3100
      isDefault: false
  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s/grafana/"
      serve_from_sub_path: true

postgresExporter:
  port: 9187

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: robogo_redis_pass
  master:
    persistence:
      enabled: false
  host: screen-redis-master
  port: 6379
  password: robogo_redis_pass

